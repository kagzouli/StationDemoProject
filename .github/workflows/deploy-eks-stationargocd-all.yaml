name: Deploy EKS station ArgoCD

#on: [push]
on: 
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: The environment to create
        options:
          - dev
        required: true

      region:
        type: choice
        description: The region where we can create objects
        options:
          - eu-west-3
        required: true

env:
  KUBERNETES_VERSION: v1.23.6

#env:
#  ENVIRONMENT_NAME: dev

jobs:
  # Deploy networks
  networks:
    uses: ./.github/workflows/terraform-networks-reusable.yaml
    with:
      # environment: ${{ env.ENVIRONMENT_NAME}}
      environment: ${{ github.event.inputs.environment}}
      region: ${{ github.event.inputs.region}}
    secrets:
      aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws_secret_key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # Deploy networks
  secrets:
    uses: ./.github/workflows/terraform-secrets-reusable.yaml
    needs: networks
    with:
      # environment: ${{ env.ENVIRONMENT_NAME}}
      environment: ${{ github.event.inputs.environment}}
      region: ${{ github.event.inputs.region}}
    secrets:
      aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws_secret_key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # Deploy EKS
  eks:
    uses: ./.github/workflows/terraform-eks-reusable.yaml
    needs: secrets
    with:
      # environment: ${{ env.ENVIRONMENT_NAME}}
      environment: ${{ github.event.inputs.environment}}
      region: ${{ github.event.inputs.region}}
    secrets:
      aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws_secret_key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # Deploy kubernetes station
  deploy_station:
    runs-on: ubuntu-latest
    needs: eks
    steps:

      - name: Checkout
        id: checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.region}}
          role-duration-seconds: 3600

      - name: Install Helm
        run: |
          curl -fsSLo get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: launch station
        id: launch-station
        run: bash launchAwsStationChart.sh internal
        working-directory: kubernetes/argocd

  # Installation ArgoCD
  install_argocd:
    runs-on: ubuntu-latest
    needs: deploy_station
    steps:
      
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.region}}
          role-duration-seconds: 3600
      
      - name: Installation Kubernetes
        id: kubernetes_installation
        run: curl -LO https://storage.googleapis.com/kubernetes-release/release/${{ env.KUBERNETES_VERSION }}/bin/linux/amd64/kubectl && chmod +x kubectl && mv kubectl /usr/local/bin/kubectl

      - name: Install Helm
        run: |
          curl -fsSLo get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh


      - name: Connect EKS cluster
        id: connect_eks_cluster
        run: aws eks --region ${{ github.event.inputs.region}} update-kubeconfig --name station-eks-cluster

      - name: Installation argoCD Namespace
        id: argocd-createnamespace
        run: kubectl get namespace | grep -q "^argocd" || kubectl create namespace argocd

      - name: Retrieve targetGroupBinding
        id: argocd-targetgroupbinding
        run: |
          echo "::set-output name=targetGroupBinding::$( aws elbv2 describe-target-groups --name argocd-target-group  --query 'TargetGroups[0].TargetGroupArn' --output text)"

      - name: Retrieve VPC CIDR
        id: argocd-vpccidr
        run: |
          echo "::set-output name=vpccidr::$( aws ec2 describe-vpcs --filter Name=tag:Name,Values=station_vpc --query 'Vpcs[].CidrBlock' --output text)"
     

      - name: Installation argoCD
        id: argocd-installation
        run: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml


      - name: Change NodePort ArgoCD Server
        id: argocd-nodeport
        run: bash changenoport-argocd.sh
        working-directory: kubernetes/argocd
      

      - name: Open UI Argocd
        id: argocd-openui
        run: helm upgrade -i argocdinstall ./argocd --set argocd.ingress.targetGroupARN="${{ steps.argocd-targetgroupbinding.outputs.targetGroupBinding }}" --set argocd.network.vpc_cidr="${{ steps.argocd-vpccidr.outputs.vpccidr }}"
        working-directory: kubernetes/helm

  # Configuration ArgoCD
  configuration_argocd:
    runs-on: ubuntu-latest
    needs: install_argocd
    steps:
      
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.region}}
          role-duration-seconds: 3600
      
      - name: Connect EKS cluster
        id: connect_eks_cluster
        run: aws eks --region ${{ github.event.inputs.region}} update-kubeconfig --name station-eks-cluster


      - name: Installation Kubernetes
        id: kubernetes_installation
        run: curl -LO https://storage.googleapis.com/kubernetes-release/release/${{ env.KUBERNETES_VERSION }}/bin/linux/amd64/kubectl && chmod +x kubectl && mv kubectl /usr/local/bin/kubectl



      - name: Installation argocdcli
        id:  argocd-installation
        run: sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 && sudo chmod +x /usr/local/bin/argocd

      - name: Retrieve argocdpassbase64
        id: argocd-passbase64
        run: |
          echo "::set-output name=password::$( aws secretsmanager get-secret-value --secret-id stationsec-secretmanager --query SecretString --output text |jq -r .argocdpassword |base64)"

      - name: Change argocd password argocd-initsecret
        id: argocd-change-initpassword
        run: |
          kubectl -n argocd patch secret argocd-initial-admin-secret \
          -p '{"stringData": {
          "data.password": "${{ steps.argocd-passbase64.outputs.password }}"
          }}'


      - name: Change argocd password argocd-secret
        id: argocd-change-password
        run: |
          kubectl -n argocd patch secret argocd-secret \
          -p '{"stringData": {
          "admin.password": "${{ steps.argocd-passbase64.outputs.password }}",
          "admin.passwordMtime": "'$(date +%FT%T%Z)'"
          }}'

  
  # Configuration ArgoCD
  install_application_argocd:
    runs-on: ubuntu-latest
    needs: configuration_argocd
    steps:
      

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.region}}
          role-duration-seconds: 3600
      
      - name: Connect EKS cluster
        id: connect_eks_cluster
        run: aws eks --region ${{ github.event.inputs.region}} update-kubeconfig --name station-eks-cluster


      - name: Install Helm
        run: |
          curl -fsSLo get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh


      - name: Retrieve back ingress
        id: stationback-targetgroupbinding
        run: |
          echo "::set-output name=targetGroupBinding::$( aws elbv2 describe-target-groups --name station-back-target-group  --query 'TargetGroups[0].TargetGroupArn' --output text)"


      - name: Installation application on argocd
        id:  argocd-installationappli
        run: |
          helm upgrade -i applications applications \
          --set station.back.ingressarn=${{ steps.stationback-targetgroupbinding.outputs.targetGroupBinding }}
        working-directory: kubernetes/argocd
  