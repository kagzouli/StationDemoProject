# Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

app:
 
  # For cloud provider (Not used in on premise kubernetes)
  network:
    vpc_cidr:  '12.0.0.0/21'
    region: 'eu-west-3' 

  environment: 'dev'

  # Apparmor : enable or disable
  apparmor: disable

  # hscaler : hpa or keda
  hscaler: 'hpa'

image:
  tag: 1.4.0
 
  # Context path of the repo nexus url
  repoNexusUrl: 'kagzouli3'

secrets:
  # Mode can be 'internal' if it's for local development, 'aws' if it comes from AWS, and 'vault' for secure on premise
  mode: 'aws'

  # For vault option (Not used in aws mode)
  vault:

    # Url of the vault
    url: ''
    
    # Version of the kv vault
    version: ''

stationredis:
  
  # Mode : internalredis or externalredis
  mode: 'internalredis'

  # redis password - Use only for secrets.mode=internal
  redisPassword: 'redis60'

  # Host name of the redis - Use only for mode=externalredis
  hostname: 'stationredis.interne.exakaconsulting.org'

  port:  6379 

  usessl: false 

  image:
    pullPolicy: IfNotPresent

stationdb:
  mode: 'internaldb'

  # Directory where to put data of the database - Use only if mode=internaldb
  databaseData: /data
  
  # Mysql root password -Use only for secrets.mode=internal
  mysqlRootPassword: root123
  
  # Mysql user
  mysqlUser: stationuser
  
  # Mysql password
  mysqlPassword: stationpwd

  # Use only if mode=externaldb for url external database
  jdbcDatabaseUrl: 'jdbc:mysql://stationdb.interne.exakaconsulting.org:3306/StationDemoDb?connectTimeout=0' 
 
  # Storage data - Use only if mode=internaldb
  storage: 
    
    # Storage type
    storageClass: 'none' 
    #storageClass: 'efs-sc' 

    # Data Capacity
    dataCapacity: 200Mi 
 
    # Global Capacity
    globalCapacity: 250Mi

    efsid: '' 
    efsaccesspointid: ''
       
  image:
    pullPolicy: IfNotPresent


stationback:

  # Nb replicas
  nbReplicas: 2

  # Nbr connexion datasource active db
  nbConnectionDbMaxActive: 15

  # Liste des ip alb du station back
  albiplist: []
  
  # Hostname
  hostname: stationback.exakaconsulting.org
  
  # External port
  externalPort: 8080

  service:
    
    # Node port
    nodePort: 32610

    # Internal port
    internalPort: 8080 
    
    # Type service:
    serviceType: NodePort 

  image:
    pullPolicy: Always   

  ingress:
    
    # type must be TargetGroupBinding for AWS
    type: "TargetGroupBinding"
    
    targetGroupARN: "" 
    
    annotations:  
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: "ip"
      alb.ingress.kubernetes.io/tags: Name=station-back-alb, Application=STATION
      alb.ingress.kubernetes.io/healthcheck-path: "/StationDemoSecureWeb/health"
      alb.ingress.kubernetes.io/listen-ports:   '[{"HTTP": 8080}]'
      alb.ingress.kubernetes.io/load-balancer-name: station-back-alb
      alb.ingress.kubernetes.io/group.name: station-back-group

stationfront:

  # Nb replicas
  nbReplicas: 2


  # Region 
  region: eu-west-3
  
  # Client id traf stat
  clientIdTrafStat: 0oaeg3yghaL9mQalz0h7
  
  
  #Okta URL
  oktaUrl: https://dev-884254.oktapreview.com

  # Liste des ip alb du station front
  albiplist: []

  # Hostname
  hostname: station.exakaconsulting.org
  
  service:
    # External port
    internalPort: 80 
    
    # Node port
    nodePort: 32601
    
    # Type service:
    # Dans le cas Ingress, il faut prendre ClusterIP ,  si c'est TargetGroupBuinding prendre imperativement NodePort 
    #serviceType: ClusterIP
    serviceType: NodePort 
 
  image:
    pullPolicy: Always  

  
  ingress:
 
    # type TargetGroupBinding imperatif dans le cas AWS. 
    # Dans le cas Ingress, il faut prendre ClusterIP ,  si c'est TargetGroupBuinding prendre imperativement NodePort 
    type: "TargetGroupBinding"

    targetGroupARN: "" 

    annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: "ip"
      alb.ingress.kubernetes.io/tags: Name=station-front-alb, Application=STATION
      alb.ingress.kubernetes.io/healthcheck-path: "/station-angular4-poc"
      alb.ingress.kubernetes.io/listen-ports:   '[{"HTTP": 80}]'
      alb.ingress.kubernetes.io/load-balancer-name: station-front-alb
      alb.ingress.kubernetes.io/group.name: station-front-group 
